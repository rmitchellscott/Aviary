package main

import (
	"embed"
	"io/fs"
	"log"
	"net/http"
	"os"
	"path"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	"github.com/rmitchellscott/aviary-backend/internal/webhook"
)

//go:embed assets/ui/out
var embeddedUI embed.FS

func main() {
	// Load .env if present
	if err := godotenv.Load(); err != nil {
		log.Println("No .env file found, using system environment")
	}

	// Determine port
	port := os.Getenv("PORT")
	if port == "" {
		port = "8000"
	}
	addr := ":" + port

	// Prepare the embedded UI filesystem
	uiSub, err := fs.Sub(embeddedUI, "assets/ui/out")
	if err != nil {
		log.Fatalf("failed to locate embedded UI: %v", err)
	}

	// Create Gin router
	router := gin.Default()

	// API routes
	router.POST("/api/webhook", webhook.Handler)
	router.GET("/api/config", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"apiUrl": "/api/"})
	})

	// Static file server for assets
	fileServer := http.FileServer(http.FS(uiSub))
	router.NoRoute(func(c *gin.Context) {
		// strip leading slash
		p := strings.TrimPrefix(c.Request.URL.Path, "/")

		// try serving a real file
		if f, err := uiSub.Open(p); err == nil {
			if info, _ := f.Stat(); !info.IsDir() {
				fileServer.ServeHTTP(c.Writer, c.Request)
				return
			}
		}

		// else fallback to index.html
		http.ServeFile(c.Writer, c.Request, path.Join("assets/ui/out", "index.html"))
	})

	log.Printf("Starting server on %s...", addr)
	if err := router.Run(addr); err != nil {
		log.Fatalf("Server failed: %v", err)
	}
}
